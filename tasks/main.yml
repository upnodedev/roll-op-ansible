---
# tasks file for roll-op

- user:
    name: '{{ansible_user}}'
    state: present
  register: roll_op_ansible_user_data 
- set_fact:
    roll_op_user_dir: '{{roll_op_ansible_user_data.home}}'  

- name: Install build-essential
  become: true
  apt: name=build-essential state=latest update_cache=yes

- name: Add etherium repository
  become: true
  ansible.builtin.apt_repository:
    repo: ppa:ethereum/ethereum

- name: Install geth
  become: true
  apt: name=ethereum state=latest update_cache=yes

- name: Python setup
  include_role:
    name: geerlingguy.pip
    apply:
      become: true
  vars:
    pip_install_packages:
      - name: hdwallet

- name: Clone roll-op repo
  git:
    repo: 'https://github.com/0xFableOrg/roll-op'
    dest: 'roll-op'

- name: Check for an existing mnemonic file
  ansible.builtin.stat:
    path: 'roll-op/.mnemonic'
  register: roll_op_mnemonic_file_status

- name: Retrieve mnemonic from file
  ansible.builtin.slurp:
    src: 'roll-op/.mnemonic'
  register: roll_op_mnemonic_data
  when: roll_op_mnemonic_file_status.stat.exists

- name: Set roll_op_seed_phrase to saved mnemonic
  set_fact:
    roll_op_seed_phrase: "{{ roll_op_mnemonic_data['content'] | b64decode }}"
  when: roll_op_mnemonic_file_status.stat.exists

- set_fact:
    have_all_private_keys: false
    have_no_private_keys: false

- set_fact:
    have_all_private_keys: true
  when: roll_op_seed_phrase is not defined and roll_op_admin_key is defined and roll_op_batcher_key is defined and roll_op_proposer_key is defined and roll_op_p2p_sequencer_key is defined

- set_fact:
    have_no_private_keys: true'
  when: roll_op_admin_key is not defined and roll_op_batcher_key is not defined and roll_op_proposer_key is not defined and roll_op_p2p_sequencer_key is not defined

- ansible.builtin.fail:
    msg: Either a seed phrase or all of the following private keys (Admin, Batcher, Proposer, and Sequencer) must be provided.
  when: not have_all_private_keys and not have_no_private_keys

- name: Generate data from existing mnemonic
  block:
  - name: Run generate_accounts using existng mnemonic
    script: 'generate_accounts.py mnemonic {{roll_op_seed_phrase_language}} "{{roll_op_seed_phrase}}"'
    args:
      executable: python3
    register: roll_op_account_output
  - name: Read account variables
    set_fact:
      roll_op_admin_account: '{{ (roll_op_account_output.stdout | from_json).adminAccount }}'
      roll_op_admin_key: '{{ (roll_op_account_output.stdout | from_json).adminKey }}'
      roll_op_batcher_account: '{{ (roll_op_account_output.stdout | from_json).batcherAccount }}'
      roll_op_batcher_key: '{{ (roll_op_account_output.stdout | from_json).batcherKey }}'
      roll_op_proposer_account: '{{ (roll_op_account_output.stdout | from_json).proposerAccount }}'
      roll_op_proposer_key: '{{ (roll_op_account_output.stdout | from_json).proposerKey }}'
      roll_op_p2p_sequencer_account: '{{ (roll_op_account_output.stdout | from_json).sequencerAccount }}'
      roll_op_p2p_sequencer_key: '{{ (roll_op_account_output.stdout | from_json).sequencerKey }}'
  when: roll_op_seed_phrase is defined and have_no_private_keys

- name: Generate data and new mnemonic
  block:
  - name: Run generate_accounts
    script: 'generate_accounts.py'
    args:
      executable: python3
    register: roll_op_account_output
  - name: Read account variables
    set_fact:
      roll_op_new_seed_phrase: '{{ (roll_op_account_output.stdout | from_json).mnemonic }}'
      roll_op_admin_account: '{{ (roll_op_account_output.stdout | from_json).adminAccount }}'
      roll_op_admin_key: '{{ (roll_op_account_output.stdout | from_json).adminKey }}'
      roll_op_batcher_account: '{{ (roll_op_account_output.stdout | from_json).batcherAccount }}'
      roll_op_batcher_key: '{{ (roll_op_account_output.stdout | from_json).batcherKey }}'
      roll_op_proposer_account: '{{ (roll_op_account_output.stdout | from_json).proposerAccount }}'
      roll_op_proposer_key: '{{ (roll_op_account_output.stdout | from_json).proposerKey }}'
      roll_op_p2p_sequencer_account: '{{ (roll_op_account_output.stdout | from_json).sequencerAccount }}'
      roll_op_p2p_sequencer_key: '{{ (roll_op_account_output.stdout | from_json).sequencerKey }}'
  - name: Save mnemonic to file
    copy:
      content: '{{roll_op_new_seed_phrase}}'
      dest: 'roll-op/.mnemonic'
  when: roll_op_seed_phrase is not defined and have_no_private_keys

- name: Extract account IDs from private keys
  block:
  - name: Run generate_accounts
    script: 'generate_accounts.py "privateKey" {{roll_op_admin_key}} {{roll_op_batcher_key}} {{roll_op_proposer_key}} {{roll_op_p2p_sequencer_key}}'
    args:
      executable: python3
    register: roll_op_account_output
  - name: Read account variables
    set_fact:
      roll_op_admin_account: '{{ (roll_op_account_output.stdout | from_json).adminAccount }}'
      roll_op_batcher_account: '{{ (roll_op_account_output.stdout | from_json).batcherAccount }}'
      roll_op_proposer_account: '{{ (roll_op_account_output.stdout | from_json).proposerAccount }}'
      roll_op_p2p_sequencer_account: '{{ (roll_op_account_output.stdout | from_json).sequencerAccount }}'
  when: have_all_private_keys

- name: Devnet variable
  set_fact:
    roll_op_is_devnet: '{{ roll_op_l1_rpc is not defined }}'

- name: Get l1 chain id if rpc is defined
  block:
  - name: Call rpc for chain id
    uri:
      method: POST
      url: '{{roll_op_l1_rpc}}'
      return_content: yes
      body: '{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}'
    register: roll_op_eth_chainId_results
  - name: Extract l1 chain id
    set_fact:
      roll_op_l1_chain_id: '{{ roll_op_eth_chainId_results.json.result }}'
  when: not roll_op_is_devnet

- name: Default l1 variables if rpc is not defined
  set_fact:
    roll_op_l1_chain_id: 900
    roll_op_l1_rpc: 'http://127.0.0.1:8545'
  when: roll_op_is_devnet

- name: Generate config.toml
  template:
    src: config.toml.j2
    dest: 'roll-op/config.toml'
    mode: '0644'

- name: Run rollop setup
  shell: './rollop --no-ansi-esc setup --yes'
  args:
    chdir: 'roll-op'

- name: Run rollop clean
  shell: './rollop --name={{roll_op_rollup_name}} --no-ansi-esc clean'
  args:
    chdir: 'roll-op'
  when: roll_op_clean == true

- name: copy l1 service file
  become: true
  template:
    src: rollop-l1-rpc.service.j2
    dest: /etc/systemd/system/rollop-l1-rpc.service
    mode: '0644'
    owner: root
    group: root

- name: Set l1 service to desired state
  become: true
  systemd:
    name: rollop-l1-rpc
    state: '{{ roll_op_state }}'
    daemon_reload: true

- name: Generate startup script
  template:
    src: start-rollop.sh.j2
    dest: 'start-rollop.sh'
    mode: '0755'

- name: copy l2 service file
  become: true
  template:
    src: start-rollop.service.j2
    dest: /etc/systemd/system/start-rollop.service
    mode: '0644'
    owner: root
    group: root

- name: Kill processes
  shell: "kill -9 $(sudo lsof -t -i:{{item}})"
  become: true
  ignore_errors: true
  loop:
    - 9545
    - 7545

- name: Set l2 service to desired state
  become: true
  systemd:
    name: start-rollop
    state: '{{ roll_op_state }}'
    daemon_reload: true
